#+TITLE: Emacs Configuration

#+AUTHOR: Nelson Loyola
#+STARTUP: content
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.j
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />
#+OPTIONS: broken-links:t
#+PROPERTY: header-args  :results silent

Links:
- ~use-pacakge~: https://github.com/jwiegley/use-package

* Basic settings

See https://tony-zorman.com/posts/2022-10-22-emacs-potpourri.html

#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  (require 'ls-lisp)
  (setq ls-lisp-use-insert-directory-program nil))

(setq user-full-name "Nelson Loyola"
      user-mail-address "nloyola@gmail.com"
      custom-file (expand-file-name "custom.el" user-emacs-directory))

(load custom-file)

(setq comp-async-report-warnings-errors nil)

(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)
(put 'erase-buffer 'disabled nil)

;; Sentences end with a single space.
(setq sentence-end-double-space nil)

;; Set the default major mode to =text-mode=. By default it's =fundamental= mode which is
;; not what we want. Also, use =text-mode= for the scratch buffer.

(setq default-major-mode 'text-mode
      initial-major-mode 'text-mode)

;; Don't scroll to middle of the page. Also, scroll line by line, without
;; scrolloff and try to keep point at the same visual place when
;; scrolling by page.
(setq-default scroll-up-aggressively 0.01 scroll-down-aggressively 0.01)
(setq redisplay-dont-pause t
      scroll-step 1
      scroll-margin 3
      scroll-conservatively 10
      scroll-preserve-screen-position t)

;; Level of decoration {1 - 3}, t = max.
(setq font-lock-maximum-decoration t)

;; For symlinks, automatically follow the link and visit the real file instead.
(setq vc-follow-symlinks nil)

;; Make searches case insensitive.
(setq-default case-fold-search t)

;; Autosave files are created between saves after a sufficient timeout in
;; the current directory for crash detection, they begin and end with
;; =#=.  Change this location to the emacs directory.
(setq auto-save-list-file-prefix "~/.emacs.d/autosave/"
      auto-save-file-name-transforms `((".*" "~/.emacs.d/autosave/" t))
      backup-directory-alist `(("." . ,(concat user-emacs-directory "autosave"))))

;;Set line wrap at column 100.
(setq-default fill-column 100)

;; Replace =yes or no= prompt with =y or n= prompt.
(fset 'yes-or-no-p 'y-or-n-p)

;; Use UTF-8 everywhere.
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; Use spaces instead of tabs.
(setq-default indent-tabs-mode nil)

;; Delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

;; Highlight matches in query-replace mode.
(setq query-replace-highlight t)

;; Use visual line mode to display long lines.
(global-visual-line-mode -1)

;;Revert these files without asking.
(setq revert-without-query '(".*"))

;; Middle-clicking is nice to paste, however it should not adjust point
;; and paste at the then adjusted point.
(setq mouse-yank-at-point t)

;; Save clipboard data of other programs in the kill ring when possible.
(setq save-interprogram-paste-before-kill t)

;; Set environment variable for shells.
(setenv "PAGER" "cat")

;; Configure =next-buffer= and =previous-buffer= to only visit file
;; buffers (has to be called for each frame):
(set-frame-parameter (selected-frame) 'buffer-predicate #'buffer-file-name)

;; These are taken from
;; https://github.com/patrickt/emacs/blob/master/init.el:
(setq
 kill-whole-line t                      ; Lets C-k delete the whole line
 ;;default-directory "~/src/"             ; My code lives here
 enable-recursive-minibuffers t         ; don't freak out if I use the minibuffer twice
 sentence-end-double-space nil          ; are you kidding me
 confirm-kill-processes nil             ; don't when quitting
 )

(setq-default cursor-type 'box
              cursor-in-non-selected-windows nil)

;; Cursor Movement
(setq auto-window-vscroll nil)

;; Turn off auto-save.
(setq auto-save-default nil)

;; Don't make any backup files.
(setq make-backup-files nil)

;; Get rid of the menu bar. Tool bar and scroll bars are disabled in
;; ~init.el~..
(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))

;; Turn off the blinking cursor.
(blink-cursor-mode -1)

;; Don't use dialog boxes
(setq use-dialog-box nil)

;; Don't want an audible bell.
(setq visible-bell t)

;; Display the running program and the selected buffer in the frame title.
(setq frame-title-format
      '("" invocation-name ": " (:eval (replace-regexp-in-string
                                        "^ +" "" (buffer-name)))))
;; Don't add new lines past end of file, and indicate unused lines at the
;; end of the window with a small image in the left fringe.
(setq next-line-add-newlines nil)
(setq-default indicate-empty-lines t)

;; Add =\n= to end of file if required.
(setq require-final-newline t)

;; Eshell
(setq eshell-history-size 100000)

;; Follow Buffer

(add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-mode))

;; Don’t compact font caches during GC.
(setq inhibit-compacting-font-caches t)

;; Automatically cycle through the highlighting faces listed in
;; ~hi-lock-face-defaults~ instead of bothering the user to pick a face
;; each time.
(setq hi-lock-auto-select-face t)

;; History
(setq history-delete-duplicates t)

;; Use the directory name to make buffer names unique.
(setq uniquify-buffer-name-style 'forward)

(global-so-long-mode 1)

(setq fit-window-to-buffer-horizontally t)
(setq window-resize-pixelwise t)

(setq-default indent-tabs-mode nil)

(setq bookmark-default-file "~/.emacs.d/etc/bookmarks")

(windmove-default-keybindings 'meta)

(electric-pair-mode 1)
(setq electric-pair-pairs
      '(
        (?\" . ?\")
        (?\' . ?\')
        (?\{ . ?\})))
(show-paren-mode 1)
#+end_src

* Fonts

** Main font

#+begin_src emacs-lisp
;;(defvar nl/gui-fixed-font-name "FiraCode Nerd Font")
(defvar nl/gui-fixed-font-name "JetBrainsMono Nerd Font")
;;(defvar nl/gui-fixed-font-name "CaskaydiaCove Nerd Font Mono")

;; (defvar nl/gui-fixed-font-name "IBM Plex Mono Medium")
;; (defvar nl/gui-variable-font-name "DejaVu Sans")

;;(defvar nl/gui-variable-font-name "GoMono Nerd Font")
(defvar nl/gui-variable-font-name "Go")

(defconst nl/gui-fixed-font-size-normal "10")
(defconst nl/gui-fixed-font-size-large "18")

(defconst nl/gui-variable-font-size-normal "12")
(defconst nl/gui-variable-font-size-large "18")

(defvar nl/gui-current-fixed-font-size nl/gui-fixed-font-size-normal)
(defvar nl/gui-current-variable-font-size nl/gui-variable-font-size-normal)

(when (string-match "-[Mm]icrosoft" operating-system-release)
  ;; WSL: WSL1 has "-Microsoft", WSL2 has "-microsoft-standard"
  (setq nl/gui-fixed-font-size-normal "12"
        nl/gui-fixed-font-size-large "18"
        nl/gui-variable-font-size-normal "14"
        nl/gui-variable-font-size-large "18"
        ))

(defun nl/gui-font (font-name font-size)
  (concat font-name "-" font-size))

(defun nl/gui-fixed-font-normal ()
  (nl/gui-font nl/gui-fixed-font-name nl/gui-fixed-font-size-normal))

(defun nl/gui-fixed-font-large ()
  (nl/gui-font nl/gui-fixed-font-name nl/gui-fixed-font-size-large))

(defun nl/gui-variable-font-normal ()
  (nl/gui-font nl/gui-variable-font-name nl/gui-variable-font-size-normal))

(defun nl/gui-variable-font-large ()
  (nl/gui-font nl/gui-variable-font-name nl/gui-variable-font-size-large))

(defun nl/set-fonts (frame)
  "Set the desired fonts for a frame. FRAME can be nil."
  (let ((fixed-font (nl/gui-fixed-font-normal)))
    (set-face-font 'default fixed-font)
    (set-face-font 'fixed-pitch fixed-font))
  (set-face-font 'variable-pitch (nl/gui-variable-font-normal))
  (set-face-attribute 'font-lock-comment-face nil :weight 'semi-bold :slant 'italic)
  ;;(set-face-background 'region (doom-darken 'green 0.2))

  (when frame
    ;;(set-face-attribute 'default frame :font nl/gui-fixed-font-name)
    (set-face-attribute 'italic frame :font nl/gui-fixed-font-name :weight 'normal :slant 'italic)
    (set-face-attribute 'bold frame :font nl/gui-fixed-font-name :weight 'bold :weight 'normal)
    (set-face-attribute 'bold-italic frame :font nl/gui-fixed-font-name :weight 'bold :slant 'italic)
    (set-fontset-font "fontset-default" nil (font-spec :size 20 :name "Fira Code Retina"))
    )

  (set-face-font 'mode-line (nl/gui-variable-font-normal))
  (set-face-font 'mode-line-buffer-id (nl/gui-variable-font-normal))
  (set-face-font 'mode-line-emphasis (nl/gui-variable-font-normal))
  (set-face-font 'mode-line-highlight (nl/gui-variable-font-normal))
  (set-face-font 'mode-line-inactive (nl/gui-variable-font-normal))
  )
#+end_src

** Change font size

#+begin_src emacs-lisp
(defhydra hydra-zoom (global-map "C-c z")
  "zoom"
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out"))
#+end_src

Taken from: http://doc.rix.si/org/fsem.html

#+begin_src emacs-lisp
(defun nl/change-font-size (fixed-font-size variable-font-size)
  "Change font size in all buffers."
  (interactive)
  (setq nl/gui-current-fixed-font-size fixed-font-size
        nl/gui-current-variable-font-size variable-font-size)
  (let* ((frame (selected-frame))
         (fixed-font (nl/gui-font nl/gui-fixed-font-name fixed-font-size))
         (variable-font (nl/gui-font nl/gui-variable-font-name variable-font-size)))

    (set-face-attribute 'default frame :font fixed-font)
    (set-face-font 'default fixed-font)
    (set-face-font 'italic variable-font)
    (set-face-font 'bold-italic variable-font)
    (set-face-font 'fixed-pitch-serif variable-font)
    (set-face-font 'variable-pitch variable-font)

    ;;(nl/org-mode-faces (* 10 (string-to-number fixed-font-size)))
    ))

(defun nl/zoom-config ()
  "Set a large enough font size for all Emacs frames for screensharing on Zoom meetings."
  (interactive)
  (nl/change-font-size "16" "18"))

(defun nl/normal-config ()
  "Set the size and position of the Emacs window."
  (interactive)
  (nl/change-font-size nl/gui-fixed-font-size-normal nl/gui-variable-font-size-normal)
  (nl/main-frame-set-size-and-position))
#+end_src

* Frame configuration

#+begin_src emacs-lisp
(defun nl/after-make-frame (frame)
  ;; disable the toolbar when in daemon mode
  ;;
  ;; https://emacs.stackexchange.com/questions/39359/tool-bar-in-emacsclient
  (unless frame
    (setq frame (selected-frame)))
  (when frame
    (with-selected-frame frame
      (when (display-graphic-p)
        (tool-bar-mode -1)
        (nl/set-fonts frame)
        ))))

(add-hook 'after-make-frame-functions 'nl/after-make-frame t)

(use-package emacs
  :hook
  ;; Make completion buffers disappear after 15 seconds.
  (completion-setup . (lambda ()
                        (run-at-time 15 nil
                                     (lambda ()
                                       (delete-windows-on "*Completions*")))))

  ;; Remove trailing whitespace
  (before-save . delete-trailing-whitespace)
  :bind
  ("C-z" . nil)     ;; I never want to suspend the frame
  )
#+end_src

* Transparency

See: https://kristofferbalintona.me/posts/202206071000/

#+begin_src emacs-lisp
(defun kb/toggle-window-transparency ()
  "Toggle transparency."
  (interactive)
  (let ((alpha-transparency 55))
    (pcase (frame-parameter nil 'alpha-background)
      (alpha-transparency (set-frame-parameter nil 'alpha-background 100))
      (t (set-frame-parameter nil 'alpha-background alpha-transparency)))))
#+end_src

* My functions

#+begin_src emacs-lisp
(defun nl/kill-this-buffer ()
  "Kill the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))

(defun nl/consult-compile ()
  "Use Consult to choose a compile command."
  (interactive)
  (let ((selected-command
         (completing-read "Select a compile command: " compile-history)))
    ;; move this command to the front of the history
    (setq compile-history (remove selected-command compile-history))
    (add-to-list 'compile-history selected-command)
    (compile selected-command)))

(defun nl/consult-async-shell-command ()
  (interactive)
  (let ((selected-command
         (completing-read "Select a shell command: " shell-command-history)))
    (async-shell-command selected-command)))

;; (defun nl/counsel-git-files ()
;;   (interactive)
;;   (let ((counsel-fzf-cmd "git ls-files | fzf -f \"%s\""))
;;     (counsel-fzf)))

(defun nl/beginning-of-line-or-indentation ()
  "move to beginning of line, or indentation"
  (interactive)
  (if (bolp)
      (back-to-indentation)
    (beginning-of-line)))

#+end_src

** Windows

#+begin_src emacs-lisp
(setq split-height-threshold 160
      split-width-threshold nil)

(defun nl/frame-grow-horizontally ()
  "Set the size and position of the Emacs window."
  (interactive)
  (windmove-right)
  (delete-window))

;; (let ((win (selected-window)))
;;   (set-frame-size frame (* 2 (frame-width)) (frame-height)))
;; (split-window-right))

(defun nl/frame-shrink-horizontally ()
  "Set the size and position of the Emacs window."
  (interactive)
  (when (> (length (window-list)) 1)
    (delete-other-windows))
  (split-window-right)
  ;; show the compilation buffer if there is one
  (let ((win (selected-window))
        (compile-buf (get-compilation-buffer)))
    (when compile-buf
      (switch-to-buffer-other-window compile-buf)
      (select-window win))))

(defun nl/frame-resize ()
  "Resizes the frame based on its current width."
  (interactive)
  (if (<= (window-total-width) 150)
      (nl/frame-grow-horizontally)
    (nl/frame-shrink-horizontally)))

(defun nl/split-window-same-file ()
  "Splits the frame into two windows, with the buffer on the rightmost window in left and right windows."
  (interactive)
  (windmove-right)
  (delete-window)
  (split-window-right)
  (windmove-right))

(global-set-key [f9] 'nl/frame-resize)
(global-set-key [S-f9] 'nl/split-window-same-file)
#+end_src

** Side windows

#+begin_src emacs-lisp
(defvar nl/side-window-parameters
  '(window-parameters . ((no-other-window . nil)
                         (no-delete-other-windows . t))))

;; (setq display-buffer-alist '())

;; (defun nl/display-buffer-debug(buf-name action)
;;   (message "%s" buf-name)
;;   (numberp (string-match "\\(?:\\*\\(?:[Hh]elp\\|grep\\|Warnings\\|Completions\\|xref\\)\\)\\*\\)\\|\\(?:\\(?:HELM.*\\|helm.*\\)\\)" buf-name)))

(add-to-list 'display-buffer-alist
             '("\\(?:\\*\\(?:grep\\|Find\\|Warnings\\|xref\\)\\*\\)\\|\\(?:\\(?:HELM.*\\|helm.*\\)\\)"
               display-buffer-in-side-window
               (window-height . 0.18)
               (side . bottom)
               (slot . -1) ;; left side
               (preserve-size . (nil . t))
               ,nl/side-window-parameters))

(add-to-list 'display-buffer-alist
             '("\\*\\(?:[Hh]elp\\|Backtrace\\|Warnings\\|Completions\\|Compile-Log\\|cargo-run\\|\\*Flycheck.*\\|shell\\|compilation\\|ng-compile\\|ng-test\\|tide-references\\|sbt\\|coverlay-stats\\)\\*"
               display-buffer-in-side-window
               (window-height . 0.2)
               (side . bottom)
               (slot . 1) ;; right side
               (preserve-size . (nil . t))
               ,nl/side-window-parameters))

#+end_src

* Key bindings

#+begin_src emacs-lisp
(global-set-key (kbd "M-%")           'query-replace-regexp)
;;(global-set-key "\C-x\C-e"          'compile)
(global-set-key (kbd "C-S-s")         'isearch-forward)
(global-set-key (kbd "C-x C-n")       'next-error)
(global-set-key (kbd "C-x k")         'nl/kill-this-buffer)
(global-set-key (kbd "M-f")           'forward-to-word)
(global-set-key (kbd "M-B")           'backward-to-word)

(global-set-key (kbd "<f1>")          'indent-for-tab-command)
(global-set-key (kbd "S-<f1>")        'indent-region)
(global-set-key (kbd "<f2>")          '(lambda () (interactive) (save-some-buffers t)))
(global-set-key (kbd "S-<f2>")        '(lambda () (interactive) (revert-buffer t t)))
;;(global-set-key (kbd "S-<f3>")        'helm-projectile-rg)
;;(global-set-key (kbd "M-S-<f3>")      'counsel-rg)
(global-set-key [f5]                  'nl/consult-compile)
(global-set-key (kbd "C-<f5>")        'compile)
(global-set-key (kbd "S-<f5>")        'toggle-truncate-lines)
(global-set-key (kbd "<f8>")          'window-toggle-side-windows)
(global-set-key (kbd "S-<f11>")       'eval-region)
(global-set-key (kbd "C-S-<f11>")     'align-regexp)
;;(global-set-key (kbd "C-c o")         'nl/counsel-git-files)

(global-set-key (kbd "<home>")     'nl/beginning-of-line-or-indentation)

#+end_src

* Theme

** Doom Themes

See https://github.com/doomemacs/themes/tree/screenshots#screenshots

#+begin_src emacs-lisp
(use-package doom-themes
  :demand t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  (load-theme 'doom-molokai t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; or for treemacs users
  ;;(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  :custom-face
  ;;(ansi-color-blue ((t (:foreground "#4f57f9"))))
  (ansi-color-blue ((t (:foreground "DeepSkyBlue1"))))
  ;;(lsp-face-highlight-read ((t (:foreground "DeepSkyBlue1"))))
  )

(with-eval-after-load 'markdown-mode
  (set-face-background 'markdown-code-face "#121212")
  ;;(set-face-foreground 'markdown-code-face (doom-darken 'green 0.2))
  ;;(set-face-background 'org-block (doom-color 'brightblack))
  (set-face-attribute 'markdown-header-face
                      nil
                      :font nl/gui-variable-font-name
                      :weight 'bold
                      :height (* 12 (string-to-number nl/gui-current-variable-font-size)))
  (set-face-attribute 'markdown-link-face
                      nil
                      :font nl/gui-variable-font-name
                      :weight 'bold
                      :height (* 10 (string-to-number nl/gui-current-variable-font-size)))
  )

(defun ap/load-doom-theme (theme)
  "Disable active themes and load a Doom theme."
  (interactive (list (intern (completing-read "Theme: "
                                              (->> (custom-available-themes)
                                                   (-map #'symbol-name)
                                                   (--select (string-prefix-p "doom-" it)))))))
  (ap/switch-theme theme))

(defun ap/switch-theme (theme)
  "Disable active themes and load THEME."
  (interactive (list (intern (completing-read "Theme: "
                                              (->> (custom-available-themes)
                                                   (-map #'symbol-name))))))
  (mapc #'disable-theme custom-enabled-themes)
  (load-theme theme 'no-confirm))
#+end_src

* Packages bundled with Emacs

** =compile=

Do not ask me to save files before compiling, or kill a previous compilation. Also scroll to the end
of the compilation buffer when it is opened.

Enable ANSI colors for compilation buffers.

#+begin_src emacs-lisp
(defun get-compilation-buffer ()
  (catch 'found
    (dolist (buf (buffer-list))
      (if (string-match "\\*compilation\\*" (buffer-name buf))
          (throw 'found buf)))))

(defun show-compilation ()
  (interactive)
  (let ((compile-buf (get-compilation-buffer)))
    (if compile-buf
        (switch-to-buffer-other-window compile-buf)
      (call-interactively 'compile))))

;; (defun nl/compilation-ansi-color-process-output ()
;;   (ansi-color-process-output nil)
;;   (set (make-local-variable 'comint-last-output-start)
;;        (point-marker)))

(defun nl/compile-hook ()
  (setq-local compilation-scroll-output t)
  (setq-local scroll-conservatively most-positive-fixnum)
  (setq-local scroll-margin 0))

;; required for TypeScript compile
;; (defun colorize-compilation-buffer ()
;;   (let ((inhibit-read-only t))
;;     (ansi-color-apply-on-region (point-min) (point-max))))
;; (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

(defun display-ansi-colors ()
  (interactive)
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region (point-min) (point-max)))
  )

(use-package compile
  :bind (("M-O"   . show-compilation)
         ;;("C-c c" . compile)
         )
  :init
  (defun nl/colorize-compilation-buffer ()
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max)))
    )
  :config
  (setq compilation-ask-about-save nil
        compilation-always-kill t
        compilation-max-output-line-length nil)

  :hook ((compilation-mode . nl/compile-hook)
         (compilation-filter . nl/colorize-compilation-buffer)
         )
  )
#+end_src

** =dired=

Make dired show directories first. Dired buffers should auto revert
and not give any use feedback (source: [[http://whattheemacsd.com/sane-defaults.el-01.html][Magnars Sveen]]).

#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :custom
  (dired-recursive-copies 'always)
  ;; Auto refresh Dired, but be quiet about it
  (global-auto-revert-non-file-buffers t)
  ;; Move files to trash when deleting
  (delete-by-moving-to-trash t)
  (dired-dwim-target t)
  (find-file-visit-truename t)
  :config
  (setq dired-listing-switches "-aBhl --group-directories-first")
  ;; Reuse same dired buffer, to prevent numerous buffers while navigating in dired
  (put 'dired-find-alternate-file 'disabled nil)
  :hook ((dired-mode . dired-hide-details-mode)
         (dired-mode . hl-line-mode)
         (dired-mode . (lambda ()
                         (local-set-key (kbd "<mouse-2>") #'dired-find-alternate-file)
                         ;;(local-set-key (kbd "RET") #'dired-find-alternate-file)
                         (local-set-key (kbd "^")
                                        (lambda () (interactive) (find-alternate-file "..")))))))
#+end_src

** =emacsclient=

#+begin_src emacs-lisp
(use-package edit-server
  :if (display-graphic-p)
  :preface
  (defun nl/after-init-hook ()
    (server-start t)
    (edit-server-start t)
    (nl/set-fonts nil)
    )
  :init
  (add-hook 'after-init-hook 'nl/after-init-hook))
#+end_src

** =recentf=

Recentf is a minor mode that builds a list of recently opened files.
This list is is automatically saved across Emacs sessions.

Prefer saving the history of opened files somewhere other than the default.

#+begin_src emacs-lisp
(use-package recentf
  :init (recentf-mode 1)
  :custom
  (recentf-save-file "~/.emacs.d/etc/recentf")
  (recentf-max-saved-items 100))
#+end_src

** =savehist=

The history of prompts like =M-:= can be saved, but let's change its
save file and history length first. Also save search entries.

#+begin_src emacs-lisp
(setq savehist-additional-variables '(search-ring regexp-search-ring)
      savehist-file "~/.emacs.d/etc/savehist"
      history-length 150)
(savehist-mode 1)
#+end_src

** =saveplace=

Remember position in a file.

#+begin_src emacs-lisp
(use-package saveplace
  :custom
  (save-place-file (locate-user-emacs-file "etc/saveplace" "places"))
  (save-place-forget-unreadable-files nil)
  (save-place-ignore-files-regexp "\\(?:COMMIT_EDITMSG\\|svn-commit\\.tmp\\|config\\.org\\)$")
  ;; activate it for all buffers
  :init
  ;;(setq-default save-place t)
  (save-place-mode t))
#+end_src

** =winner-mode=

Window management. ~C-c left (winner-undo)~ undoes the last window
configuration change. Redo the changes using ~C-c right (winner-redo)~.
Also move from window to window using Meta and the direction keys.

#+begin_src emacs-lisp
(use-package winner
  :demand t
  :config
  (winner-mode))
#+end_src

* Elpa packages
** [[https://github.com/wyuenho/all-the-icons-dired][all-the-icons-dired]]

#+begin_src emacs-lisp :tangle no
(use-package all-the-icons)

;; disable hook for now
;;
;; now done in treemacs-icons-dired config
(use-package all-the-icons-dired
  ;; M-x all-the-icons-install-fonts
  :hook (dired-mode . all-the-icons-dired-mode)
  )
#+end_src

** [[https://github.com/abo-abo/ace-window][ace-window]]

A package that uses the same idea from ace-jump-mode for
buffer navigation, but applies it to windows. The default keys are
1-9, but it's faster to access the keys on the home row, so that's
what I have them set to (with respect to Dvorak, of course).

#+begin_src emacs-lisp
(use-package ace-window
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

** [[https://github.com/abo-abo/avy][avy]]

A quick way to jump around text in buffers.

#+begin_src emacs-lisp
(use-package avy
  :bind
  (("C-c SPC" . avy-goto-char)
   ("C-:" . avy-goto-char-timer)))
#+end_src
** [[https://github.com/company-mode/company-mode][company-mode]]

Complete anything.

#+begin_src emacs-lisp
(use-package company
  :diminish company-mode
  :bind
  (:map company-active-map
        ("<tab>" . company-complete-common-or-cycle)
        ("M-/" . company-complete-common)
        ("C-n" . company-select-next)
        ("C-p" . company-select-previous))
  :hook
  ((emacs-lisp-mode . (lambda ()
                        (setq-local company-backends '(company-elisp))))
   (emacs-lisp-mode . company-mode))
  :custom
  (company-dabbrev-downcase nil "Don't downcase returned candidates.")
  (company-show-numbers t "Numbers are helpful.")
  (company-abort-manual-when-too-short t "Be less enthusiastic about completion.")
  :custom-face
  (company-tooltip ((t (:family "FiraCode Nerd Font" :height 100))))
  :config
  (setq company-idle-delay 0              ;; no delay no autocomplete
        company-minimum-prefix-length 1
        company-tooltip-limit 20)
  )
#+end_src

** [[https://github.com/jordonbiondo/column-enforce-mode][column-enforce-mode]]

#+begin_src emacs-lisp :tangle no
(use-package column-enforce-mode
  :config
  (setq column-enforce-column 120)
  :hook (progmode-hook . column-enforce-mode))
#+end_src

** Completing-Read

=consult-buffer=

| Keys  | Description            |
|-------+------------------------|
| b SPC | Narrow to buffers      |
| f SPC | Narrow to recent files |
| m SPC | Narrow to bookmarks    |
| p SPC | Narrow to project      |

*** [[https://github.com/minad/consult][consult]]

#+begin_src emacs-lisp
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
  )
#+end_src

**** My functions

#+begin_src emacs-lisp
(defun nl/consult-ripgrep-pwd ()
  (interactive)
  (consult-ripgrep (if (buffer-file-name)
                       default-directory
                     dired-directory)))
#+end_src

*** [[https://gitlab.com/OlMon/consult-projectile][consult-projectile]]

#+begin_src emacs-lisp
(use-package consult-projectile
  :after (consult))
#+end_src

*** [[https://github.com/mohkale/consult-yasnippet][consult-yasnippet]]

#+begin_src emacs-lisp
(use-package consult-yasnippet)
#+end_src

*** [[https://github.com/oantolin/embark][embark]]

- ~M-x embark-collect-snapshot~ - Within an embark session, save results to a buffer

#+begin_src emacs-lisp
(use-package marginalia
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :init
  (marginalia-mode))

(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings))  ;; alternative for `describe-bindings'

  :preface

  (defmacro my/embark-ace-action (fn)
    `(defun ,(intern (concat "my/embark-ace-" (symbol-name fn))) ()
       (interactive)
       (with-demoted-errors "%s"
         (require 'ace-window)
         (let ((aw-dispatch-always t))
           (aw-switch-to-window (aw-select nil))
           (call-interactively (symbol-function ',fn))))))

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))


  (define-key embark-file-map     (kbd "o") (my/embark-ace-action find-file))
  (define-key embark-buffer-map   (kbd "o") (my/embark-ace-action switch-to-buffer))
  (define-key embark-bookmark-map (kbd "o") (my/embark-ace-action bookmark-jump))
  )

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** [[https://github.com/minad/vertico][vertico]]

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)
  )

;; Use the `orderless' completion style.
;; Enable `partial-completion' for file path expansion.
;; You may prefer to use `initials' instead of `partial-completion'.
(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        ;;completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src

** css-mode

#+begin_src emacs-lisp
(use-package css-mode
  :preface
  (defun nl/css-mode-hook ()
    (display-line-numbers-mode))
  :hook (css-mode . nl/css-mode-hook)
  )
#+end_src

** [[https://github.com/akermu/emacs-libvterm][emacs-libvterm]]

#+begin_src emacs-lisp
(when (file-directory-p "~/src/github/elisp/emacs-libvterm")
  (use-package vterm
    :load-path "~/src/github/elisp/emacs-libvterm"
    :bind
    (:map vterm-mode-map
          ("M-<right>" . windmove-right)
          ("M-<left>" . windmove-left)
          ("M-<up>" . windmove-up)
          ("M-<down>" . windmove-down))
    :commands vterm vterm-other-window
    :config
    (setq vterm-max-scrollback 10000)))
#+end_src
** [[https://github.com/emacs-lsp/dap-mode][dap-mode]]

#+begin_src emacs-lisp
(use-package dap-mode
  :after lsp-mode
  ;;:hook ((dap-stopped . (call-interactively #'dap-hydra)))
  :commands (dap-debug)
  :config
  (dap-mode t)
  (dap-ui-mode t)
  ;;(require 'dap-node)
  ;;(require 'dap-java)
  (require 'dap-php)
  (require 'dap-python)
  ;;(require 'dap-lldb)
  (add-hook 'dap-stopped-hook
            (lambda (arg) (call-interactively #'dap-hydra)))
  )
#+end_src

** [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]]

#+begin_src emacs-lisp
(use-package dashboard
  :demand t
  :custom
  (dashboard-projects-backend 'projectile)
  :config
  (setq dashboard-items '((recents  . 5)
                          (projects . 5)
                          (bookmarks . 5)
                          (agenda . 5)
                          (registers . 5)))
  (dashboard-setup-startup-hook))
#+end_src
** [[https://github.com/spotify/dockerfile-mode][dockerfile-mode]]

#+begin_src emacs-lisp
(use-package dockerfile-mode
  :mode ("Dockerfile\\'" . dockerfile-mode))
#+end_src

** Git
*** [[https://github.com/magit/magit][magit]]

A great interface for git projects. It's much more pleasant to use than the git interface on the
command line. Use an easy keybinding to access magit.

#+begin_src emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status))
  :hook (magit-mode . magit-todos-mode)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
  (setq-default vc-handled-backends '(Git))
  (setq magit-push-always-verify nil

        ;; only use A and B in Ediff
        magit-ediff-dwim-show-on-hunks t)
  (magit-add-section-hook 'magit-status-sections-hook
                          'magit-insert-modules
                          'magit-insert-stashes
                          'append))
#+end_src

**** Fullscreen magit

#+BEGIN_QUOTE
The following code makes magit-status run alone in the frame, and then restores the old window
configuration when you quit out of magit.

No more juggling windows after commiting. It's magit bliss.
#+END_QUOTE
[[http://whattheemacsd.com/setup-magit.el-01.html][Source: Magnar Sveen]]

#+begin_src emacs-lisp
;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  ;;(window-configuration-to-register ?magit-fullscreen)
  (window-configuration-to-register ?z)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  ;;(jump-to-register ?magit-fullscreen))
  (jump-to-register ?z))
#+end_src

**** File log

=M-x magit-log-buffer-file=

*** [[https://github.com/alphapapa/magit-todos][magit-todos]]

#+begin_src emacs-lisp
(use-package magit-todos
  :diminish
  :after magit
  :custom
  (magit-todos-auto-group-items 'always)
  (magit-todos-group-by '(magit-todos-item-keyword magit-todos-item-filename))
  :config
  (magit-todos-mode))
#+end_src

*** [[https://gitlab.com/pidu/git-timemachine][git-timemachine]]

#+begin_src emacs-lisp
(use-package git-timemachine
  :commands git-timemachine)
#+end_src

*** [[https://github.com/syohex/emacs-git-gutter][emacs-git-gutter]]

#+begin_src emacs-lisp
(use-package git-gutter
  :diminish git-gutter-mode
  :hook (prog-mode . git-gutter-mode))
#+end_src

*** difftastic

See https://tsdh.org/posts/2022-08-01-difftastic-diffing-with-magit.html

#+begin_src emacs-lisp :tangle no
(defun th/magit--with-difftastic (buffer command)
  "Run COMMAND with GIT_EXTERNAL_DIFF=difft then show result in BUFFER."
  (let ((process-environment
         (cons (concat "GIT_EXTERNAL_DIFF=difft --width="
                       (number-to-string (frame-width)))
               process-environment)))
    ;; Clear the result buffer (we might regenerate a diff, e.g., for
    ;; the current changes in our working directory).
    (with-current-buffer buffer
      (setq buffer-read-only nil)
      (erase-buffer))
    ;; Now spawn a process calling the git COMMAND.
    (make-process
     :name (buffer-name buffer)
     :buffer buffer
     :command command
     ;; Don't query for running processes when emacs is quit.
     :noquery t
     ;; Show the result buffer once the process has finished.
     :sentinel (lambda (proc event)
                 (when (eq (process-status proc) 'exit)
                   (with-current-buffer (process-buffer proc)
                     (goto-char (point-min))
                     (ansi-color-apply-on-region (point-min) (point-max))
                     (setq buffer-read-only t)
                     (view-mode)
                     (end-of-line)
                     ;; difftastic diffs are usually 2-column side-by-side,
                     ;; so ensure our window is wide enough.
                     (let ((width (current-column)))
                       (while (zerop (forward-line 1))
                         (end-of-line)
                         (setq width (max (current-column) width)))
                       ;; Add column size of fringes
                       (setq width (+ width
                                      (fringe-columns 'left)
                                      (fringe-columns 'right)))
                       (goto-char (point-min))
                       (pop-to-buffer
                        (current-buffer)
                        `(;; If the buffer is that wide that splitting the frame in
                          ;; two side-by-side windows would result in less than
                          ;; 80 columns left, ensure it's shown at the bottom.
                          ,(when (> 80 (- (frame-width) width))
                             #'display-buffer-at-bottom)
                          (window-width
                           . ,(min width (frame-width))))))))))))

(defun th/magit-show-with-difftastic (rev)
  "Show the result of \"git show REV\" with GIT_EXTERNAL_DIFF=difft."
  (interactive
   (list (or
          ;; If REV is given, just use it.
          (when (boundp 'rev) rev)
          ;; If not invoked with prefix arg, try to guess the REV from
          ;; point's position.
          (and (not current-prefix-arg)
               (or (magit-thing-at-point 'git-revision t)
                   (magit-branch-or-commit-at-point)))
          ;; Otherwise, query the user.
          (magit-read-branch-or-commit "Revision"))))
  (if (not rev)
      (error "No revision specified")
    (th/magit--with-difftastic
     (get-buffer-create (concat "*git show difftastic " rev "*"))
     (list "git" "--no-pager" "show" "--ext-diff" rev))))

(defun th/magit-diff-with-difftastic (arg)
  "Show the result of \"git diff ARG\" with GIT_EXTERNAL_DIFF=difft."
  (interactive
   (list (or
          ;; If RANGE is given, just use it.
          (when (boundp 'range) range)
          ;; If prefix arg is given, query the user.
          (and current-prefix-arg
               (magit-diff-read-range-or-commit "Range"))
          ;; Otherwise, auto-guess based on position of point, e.g., based on
          ;; if we are in the Staged or Unstaged section.
          (pcase (magit-diff--dwim)
            ('unmerged (error "unmerged is not yet implemented"))
            ('unstaged nil)
            ('staged "--cached")
            (`(stash . ,value) (error "stash is not yet implemented"))
            (`(commit . ,value) (format "%s^..%s" value value))
            ((and range (pred stringp)) range)
            (_ (magit-diff-read-range-or-commit "Range/Commit"))))))
  (let ((name (concat "*git diff difftastic"
                      (if arg (concat " " arg) "")
                      "*")))
    (th/magit--with-difftastic
     (get-buffer-create name)
     `("git" "--no-pager" "diff" "--ext-diff" ,@(when arg (list arg))))))

(transient-define-prefix th/magit-aux-commands ()
  "My personal auxiliary magit commands."
  ["Auxiliary commands"
   ("d" "Difftastic Diff (dwim)" th/magit-diff-with-difftastic)
   ("s" "Difftastic Show" th/magit-show-with-difftastic)])

(transient-append-suffix 'magit-dispatch "!"
  '("#" "My Magit Cmds" th/magit-aux-commands))

(define-key magit-status-mode-map (kbd "#") #'th/magit-aux-commands)
#+end_src

** [[https://github.com/magnars/expand-region.el][expand-region]]

#+begin_src emacs-lisp
(use-package expand-region
  ;; :load-path (lambda () (expand-file-name "~/src/github/elisp/expand-region.el"))
  :bind
  (("C-=" . er/expand-region)
   ("M-S-<up>" . er/expand-region)
   ("M-S-<down>" . er/contract-region))
  :config
  (setq expand-region-smart-cursor t
        er/enable-subword-mode? nil))
#+end_src

** [[https://github.com/flycheck/flycheck][flycheck]]

#+begin_src emacs-lisp
(use-package flycheck
  :commands global-flycheck-mode
  :diminish flycheck-mode
  :commands flycheck-define-checker
  :init
  (global-flycheck-mode)
  :config
  (setq flycheck-standard-error-navigation nil)

  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jshint)))

  (setq flycheck-checkers (append flycheck-checkers
                                  '(javascript-eslint))
        flycheck-python-flake8-executable "flake8")
  ;; use eslint with web-mode for jsx files
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-add-mode 'javascript-eslint 'js2-mode)
  (flycheck-add-mode 'javascript-eslint 'js-mode))
#+end_src

** [[https://github.com/minad/jinx][jinx]]

#+begin_src emacs-lisp
(use-package jinx
  :hook (emacs-startup . global-jinx-mode)
  :bind (("M-$" . jinx-correct)
         ("C-M-$" . jinx-languages))
  :config
  (setq jinx-languages "en_CA"))
#+end_src

** [[https://github.com/nflath/hungry-delete][hungry-delete]]

So that hungry deletion can be used in all modes.

#+begin_src emacs-lisp
(use-package hungry-delete
  :diminish hungry-delete-mode
  :init
  (global-hungry-delete-mode))
#+end_src

** [[https://github.com/abo-abo/hydra][hydra]]

This package can be used to tie related commands into a family of
short bindings with a common prefix - a Hydra.

#+begin_src emacs-lisp
(use-package hydra
  :pin melpa
  :init
  (use-package cl-lib)
  (use-package lv)
  (use-package key-chord
    :init
    (setq key-chord-one-key-delay 0.16)
    :config
    (key-chord-mode 1))
  :custom
  (hydra-hint-display-type 'posframe)
  :config
  ;;(setq hydra-posframe-show-params (plist-put hydra-posframe-show-params :font "Fira Code Retina"))
  (setq hydra-posframe-show-params
        (plist-put hydra-posframe-show-params :font nl/gui-fixed-font-name))

  (defun nl/pull-window ()
    "Pull a window to the window the point is at"
    (interactive)
    (aw--push-window (selected-window))
    (ace-swap-window)
    (aw-flip-window))

  (defun nl/open-buffer-in-other-window ()
    "Open buffer in another window."
    (interactive)
    (let ((pt (point))
          (buf (current-buffer))
          (window (ace-select-window)))
      (set-window-buffer window buf)
      (goto-char pt)
      (recenter-top-bottom 'top)))

  ;; http://oremacs.com/2015/01/29/more-hydra-goodness/

  (defun hydra-universal-argument (arg)
    (interactive "P")
    (setq prefix-arg (if (consp arg)
                         (list (* 4 (car arg)))
                       (if (eq arg '-)
                           (list -4)
                         '(4)))))

  (global-set-key
   (kbd "C-,")
   (defhydra hydra-files (:columns 2 :color red)
     "Files hydra"
     ("h" (dired "~/.") "home" :column "System" :color blue)
     ("e" (dired "~/.emacs.d") "Emacs" :color blue)
     ("c" (dired "~/.config") "Config" :color blue)
     ("l" (dired "~/.local") "Local" :color blue)
     ("P" (dired "~/src") "src" :column "Projects" :color blue)
     ("n" (dired "~/src/nordita/norweb-2021") "Norweb" :color blue)
     ("N" (dired "~/src/nordita/norweb-2021-dev") "Norweb-dev" :color blue)
     ("o" (dired "~/src/openTA/openta") "OpenTA" :color blue)
     ("C" (dired "~/home_config") "My config" :column "Mine" :color blue)
     ("S" (dired "~/src/nelson/nlscripts") "My scripts" :color blue)
     ("O" (dired "~/Dropbox/orgfiles") "Org" :color blue)
     ))

  (key-chord-define-global
   "yy"
   (defhydra hydra-window (:color red)
     "Window hydra"
     ("h" windmove-left "move left" :color red :column "move")
     ("j" windmove-down "move down" :color red)
     ("k" windmove-up "move up" :color red)
     ("l" windmove-right "move right" :color red)
     ("s" ace-swap-window "swap window" :color blue)
     ("p" nl/pull-window "pull window" :color blue)
     ("|" (progn (split-window-right) (windmove-right)) "split right and move" :column "split" :color blue)
     ("_" (progn (split-window-below) (windmove-down)) "split below and move" :color blue)
     ("v" split-window-right "split right" :color blue)
     ("x" split-window-below "split below" :color blue)
     ("u" winner-undo "winner undo" :column "winner / ace " :color blue)
     ("r" winner-redo "winner redo") ;;Fixme, not working?
     ("a" ace-window "ace select window" :exit t)
     ("f" new-frame "new frame" :column "frame" :exit t)
     ("o" nl/open-buffer-in-other-window "open in other window" :exit t)
     ("da" ace-delete-window "ace delete window" :column "delete" :color blue)
     ("dw" delete-window "delete window")
     ("db" kill-this-buffer "kill this buffer" :color blue)
     ("df" delete-frame "delete frame" :exit t)
     ("q" nil "quit")))

  (key-chord-define-global
   "zz"
   (defhydra hydra-buffer (:color blue :columns 3)
     "Buffer hydra"
     ("n" next-buffer "next" :color red)
     ;;("b" helm-mini "switch")
     ("B" ibuffer "ibuffer")
     ("p" previous-buffer "prev" :color red)
     ("C-b" buffer-menu "buffer menu")
     ("d" kill-this-buffer "delete" :color red)
     ;; don't come back to previous buffer after delete
     ("D" (progn (kill-this-buffer) (next-buffer)) "Delete" :color red)
     ("s" save-buffer "save" :color red)))

  (global-set-key
   (kbd "M-g M-g")
   (defhydra hydra-goto-line (goto-map "")
     "goto-line"
     ("g" consult-goto-line "go")
     ("m" set-mark-command "mark" :bind nil)
     ("q" nil "quit")))

  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
	       (next-win-buffer (window-buffer (next-window)))
	       (this-win-edges (window-edges (selected-window)))
	       (next-win-edges (window-edges (next-window)))
	       (this-win-2nd (not (and (<= (car this-win-edges)
					   (car next-win-edges))
				       (<= (cadr this-win-edges)
					   (cadr next-win-edges)))))
	       (splitter
	        (if (= (car this-win-edges)
		       (car (window-edges (next-window))))
		    'split-window-horizontally
		  'split-window-vertically)))
	  (delete-other-windows)
	  (let ((first-win (selected-window)))
	    (funcall splitter)
	    (if this-win-2nd (other-window 1))
	    (set-window-buffer (selected-window) this-win-buffer)
	    (set-window-buffer (next-window) next-win-buffer)
	    (select-window first-win)
	    (if this-win-2nd (other-window 1))))))

  (global-set-key
   (kbd "C-c w")
   (defhydra hydra-windows-nav (:color red)
     ("s" shrink-window-horizontally "shrink horizontally" :column "Sizing")
     ("e" enlarge-window-horizontally "enlarge horizontally")
     ("S" shrink-window "shrink vertically")
     ("E" enlarge-window "enlarge vertically")
     ("b" balance-windows "balance window height")
     ("m" maximize-window "maximize current window")
     ("M" minimize-window "minimize current window")
     ("h" split-window-below "split horizontally" :column "Split management")
     ("v" split-window-right "split vertically")
     ("d" delete-window "delete current window")
     ("x" delete-other-windows "delete-other-windows")
     ("z" ace-window "ace window" :color blue :column "Navigation")
     ("h" windmove-left "← window")
     ("j" windmove-down "↓ window")
     ("k" windmove-up "↑ window")
     ("l" windmove-right "→ window")
     ("r" toggle-window-split "rotate windows") ; Located in utility functions
     ("q" nil "quit menu" :color blue :column nil))))
#+end_src

*** Aligning things

Align by colons (handy for JavaScript), align by commas, and align by
equal signs.

Borrowed from:

http://danconnor.com/post/5028ac91e8891a000000111f/align_and_columnize_key_value_data_in_emacs

#+begin_src emacs-lisp
(defun align-colons (beg end)
  (interactive "r")
  (align-regexp beg end ":\\(\\s-+\\)" 1 1 t))

(defun align-commas (beg end)
  (interactive "r")
  (align-regexp beg end ",\\(\\s-+\\)" 1 1 t))

(defun align-equals (beg end)
  (interactive "r")
  (align-regexp beg end "\\(\\s-*\\)=" 1 1 t))

(defun align-dollar-sign (beg end)
  (interactive "r")
  (align-regexp beg end "\\(\\s-*\\)\\$" 1 1 t))

(defun align-parameters (beg end)
  (interactive "r")
  (align-regexp beg end "\\w+\\(\\s-*\\)\\w+,?" 1 1 t))

(defhydra hydra-nl-align (:hint nil)
  (":" align-colons "colons" :color blue :column "Align things")
  ("," align-commas "commas" :color blue)
  ("=" align-equals "equals" :color blue)
  ("$" align-dollar-sign "dollar sign" :color blue)
  ("p" align-parameters "parameters" :color blue))
#+end_src

** [[https://github.com/jschaf/emacs-lorem-ipsum][lorem-ipsum]]

Add filler lorem ipsum text to Emacs.

#+begin_src emacs-lisp
(use-package lorem-ipsum)
#+end_src

** [[https://github.com/emacs-lsp/lsp-docker][lsp-docker]]

#+begin_src emacs-lisp :tangle no
(use-package lsp-docker
  :init (setq lsp-keymap-prefix "C-c l"))
#+end_src

** [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]

#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode))

(use-package lsp-mode
  ;;:load-path "~/src/github/elisp/lsp-mode"
  :pin melpa
  :commands (lsp lsp-deferred)
  :custom
  (lsp-keymap-prefix "C-c l")
  (lsp-enable-snippet t)
  (lsp-enable-file-watchers nil)
  (lsp-pyls-plugins-pycodestyle-max-line-length 120)
  (lsp-intelephense-php-version "8.1.9")
  (lsp-intelephense-format-enable nil)
  ;;(setq lsp-response-timeout 25)
  ;; what to use when checking on-save. "check" is default, I prefer clippy
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-eldoc-render-all t)
  (lsp-idle-delay 0.6)
  ;; enable / disable the hints as you prefer:
  (lsp-rust-analyzer-server-display-inlay-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  (lsp-rust-analyzer-display-chaining-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  (lsp-rust-analyzer-display-closure-return-type-hints t)
  (lsp-rust-analyzer-display-parameter-hints nil)
  (lsp-rust-analyzer-display-reborrow-hints nil)
  :config
  (lsp-enable-which-key-integration t)
  (setq lsp-prefer-capf t
        lsp-idle-delay 0.5
        lsp-pyls-plugins-flake8-enabled t
        ;; lsp-log-io t
        ;; lsp-ensabled-clients '(intelephense)
        )
  (setq lsp-clients-angular-language-server-command
        '("node"
          "/home/nelson/.nvm/versions/node/v16.16.0/lib/node_modules/@angular/language-server"
          "--ngProbeLocations"
          "/home/nelson/.nvm/versions/node/v16.16.0/lib/node_modules"
          "--tsProbeLocations"
          "/home/nelson/.nvm/versions/node/v16.16.0/lib/node_modules"
          "--stdio"))
  (lsp-register-custom-settings
   '(("pyls.plugins.pyls_mypy.enabled" t t)
     ("pyls.plugins.pyls_mypy.live_mode" nil t)
     ("pyls.plugins.pyls_black.enabled" t t)
     ("pyls.plugins.pyls_isort.enabled" t t))))

(use-package lsp-ui
  ;; :load-path "~/src/github/elisp/lsp-ui"
  :hook (lsp-mode . lsp-ui-mode)
  :commands lsp-ui-mode
  :bind (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references)
              ([f10] . lsp-ui-sideline-toggle-symbols-info))
  :custom-face
  (lsp-ui-peek-peek ((nil :background "gray30")))
  (lsp-ui-peek-highlight ((nil :foreground "gray60" :background "gray20")))
  (header-line ((t (:inherit mode-line :background "gray20"))))
  :custom
  (lsp-ui-sideline-enable t)
  (lsp-ui-sideline-show-hover nil)
  (lsp-ui-peek-enable nil)
  (flycheck-add-next-checker 'lsp-ui 'typescript-tslint)
  :config
  (setq lsp-ui-flycheck-list-position 'bottom
        lsp-ui-doc-enable t
        ;;lsp-ui-doc-show-with-cursor t
        ;;lsp-ui-doc-show-with-mouse t
        lsp-ui-doc-use-childframe t
        lsp-ui-doc-position 'bottom
        lsp-ui-doc-include-signature t
        lsp-ui-peek-always-show nil
        lsp-ui-peek-list-width 60
        lsp-ui-peek-peek-height 25
        lsp-eldoc-enable-hover nil)
  )
#+end_src

** [[https://github.com/immerrr/lua-mode][lua-mode]]

#+begin_src emacs-lisp
(use-package lua-mode
  :mode (("\\.lua\\'" . lua-mode))
  :preface
  (defun nl/lua-mode-hook ()
    (display-line-numbers-mode))
  :hook (lua-mode . nl/lua-mode-hook))
#+end_src

** [[https://github.com/dandavison/magit-delta][magit-delta]]

#+begin_src emacs-lisp :tangle no
(use-package magit-delta
  :hook (magit-mode . magit-delta-mode))
#+end_src

** [[https://github.com/defunkt/markdown-mode][markdown-mode]]

#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode))
  :hook
  (markdown-mode . (lambda () (auto-fill-mode -1)))
  (markdown-mode . variable-pitch-mode)
  (markdown-mode . flyspell-mode)
  :config
  (setq markdown-command "pandoc")
  (dolist (face '(markdown-inline-code-face markdown-code-face))
    (set-face-attribute face nil :inherit 'fixed-pitch)))
#+end_src

** [[https://github.com/ancane/markdown-preview-mode][markdown-preview-mode]]

#+begin_src emacs-lisp
(use-package markdown-preview-mode
  :config
  ;;(add-to-list 'markdown-preview-stylesheets
  ;;             "https://raw.githubusercontent.com/richleland/pygments-css/master/emacs.css")
  (setq markdown-preview-stylesheets (list
                                      "http://thomasf.github.io/solarized-css/solarized-dark.min.css")))
#+end_src

** [[https://github.com/emacsfodder/move-text][move-text]]

#+begin_src emacs-lisp
(use-package move-text
  :bind (("C-S-<up>" . move-text-up)
         ("C-S-<down>" . move-text-down)))
#+end_src
** [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]

Sometimes you end up with cursors outside of your view. You can scroll
the screen to center on each cursor with ~C-v~ and ~M-v~.

#+begin_src emacs-lisp
(use-package multiple-cursors
  :after selected
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-M->"       . mc/unmark-next-like-this)
         ("C-M-<"       . mc/unmark-previous-like-this)
         ("C-c C-<"     . mc/mark-all-like-this)
         ("C-!"         . mc/mark-next-symbol-like-this)
         ("C-x C-m"     . mc/mark-all-dwim)
         (:map selected-keymap
               ("C-'" . mc/edit-lines)
               ("."   . mc/mark-next-like-this)
               ("<"   . mc/unmark-next-like-this)
               ("C->" . mc/skip-to-next-like-this)
               (","   . mc/mark-previous-like-this)
               (">"   . mc/unmark-previous-like-this)
               ("C-<" . mc/skip-to-previous-like-this)
               ("y"   . mc/mark-next-symbol-like-this)
               ("Y"   . mc/mark-previous-symbol-like-this)
               ("w"   . mc/mark-next-word-like-this)
               ("W"   . mc/mark-previous-word-like-this))))
#+end_src

*
** [[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons]]

#+begin_src emacs-lisp
(use-package nerd-icons
  :custom
  (nerd-icons-font-family "FiraCode Nerd Font")
  )

(use-package nerd-icons-dired
  :load-path "~/src/github/elisp/nerd-icons-dired"
  :hook
  (dired-mode . nerd-icons-dired-mode))
#+end_src

** PHP
*** [[https://github.com/ejmr/php-mode][php-mode]]

Flycheck configuration taken from [[https://truongtx.me/2014/07/22/setup-php-development-environment-in-emacs][here]], but had to change the way the ~nl/php-checker~
checker is loaded.

#+begin_src emacs-lisp
(use-package php-mode
  :mode "\\.php[345]?\\'"
  :hook
  (php-mode . nl/nordita-php-mode-hook)
  :preface
  (use-package flycheck-phpstan)
  (require 'php-cs-fixer)

  (defun nl/php-mode-hook ()
    "My PHP mode configuration."
    (lsp-deferred)
    (require 'flycheck-phpstan)
    (flycheck-mode t)
    (subword-mode +1)
    (php-set-style "nl/php"));; this style is based on the symfony2 style

  (defun nl/php-before-save-hook ()
    (when (string-match-p (regexp-quote ".php") buffer-file-name)
      (let ((default-directory (projectile-project-root))
            (file-name (replace-regexp-in-string (projectile-project-root) "" buffer-file-name))
            (command (concat php-cs-fixer-command
                             " list-files --config "
                             (shell-quote-argument php-cs-fixer-config-option))))
        (when (string-match-p (regexp-quote file-name) (shell-command-to-string command))
          (php-cs-fixer-fix)
          ))))

  (defun nl/nordita-php-mode-hook ()
    "Nordita's PHP mode configuration."
    (lsp)
    (require 'flycheck-phpstan)
    (flycheck-mode t)
    (subword-mode +1)
    (display-line-numbers-mode)
    (add-hook 'before-save-hook 'nl/php-before-save-hook)
    (cond ((string= (projectile-project-root) (expand-file-name "~/src/nordita/norweb-2021/"))
           (setq lsp-intelephense-files-exclude
                 (vconcat lsp-intelephense-files-exclude
                          [
                           ;;"public/wire/**" -- if uncommented, then wont be able to jump to definitions
                           ;; "**/FieldtypeCombo/**"
                           ;; "**/FieldtypeFieldsetGroup/**"
                           ;; "**/FieldtypeRepeaterMatrix/**"
                           ;; "**/FieldtypeTextareas/**"
                           ;; "**/FileValidatorSvgSanitizer/**"
                           ;; "**/InputfieldCKEditor/**"
                           "public/wire.old/**"
                           "**/AppApi/**"
                           "**/ProcessHannaCode/**"
                           "**/pw-fieldtype-yaml/**"
                           "**/RockMigrations/**"
                           "**/TracyDebugger/**"
                           ])
                 lsp-intelephense-rename-exclude
                 (vconcat lsp-intelephense-rename-exclude
                          ["public/wire/**"
                           "public/wire.old/**"
                           "**/AppApi/**"
                           "**/FieldtypeCombo/**"
                           "**/FieldtypeFieldsetGroup/**"
                           "**/FieldtypeRepeaterMatrix/**"
                           "**/FieldtypeTextareas/**"
                           "**/FileValidatorSvgSanitizer/**"
                           "**/InputfieldCKEditor/**"
                           "**/ProcessHannaCode/**"
                           "**/pw-fieldtype-yaml/**"
                           "**/RockMigrations/**"
                           "**/TracyDebugger/**"
                           ])
                 lsp-intelephense-php-version "8.1")
           ))
    )

  ;; this style is based on the symfony2 style
  (c-add-style
   "nl/php"
   '("php"
     (c-basic-offset . 2)
     (indent-tabs-mode . nil)
     (c-offsets-alist . ((statement-cont . php-lineup-hanging-semicolon)))
     (c-indent-comments-syntactically-p . t)
     (fill-column . 120)
     (require-final-newline . t)))

  ;; see https://github.com/taksatou/dotfiles/blob/037e22d7a31112321b92e11bcbd871b8e2acbc9c/.emacs.d/my/my-codingstyles.el
  (c-add-style
   "nl/php-nordita"
   '("php"
     (c-set-style "k&r")
     (c-basic-offset . 4)
     (indent-tabs-mode . nil)
     (c-offsets-alist . ((defun-open            . 0)
                         (defun-close           . 0)
                         (defun-block-intro     . +)
                         (topmost-intro         . 0)
                         (topmost-intro-cont    . c-lineup-topmost-intro-cont)
                         (block-open            . 0)
                         (block-close           . 0)
                         (statement             . 0)
                         (statement-cont        . +)
                         (statement-block-intro . +)
                         (statement-case-intro  . +)
                         (statement-case-open   . 0)
                         (substatement          . +)
                         (substatement-open     . 0)
                         (case-label            . +)
                         (comment-intro         . (c-lineup-knr-region-comment c-lineup-comment))
                         (arglist-intro         . +)
                         (arglist-cont          . (c-lineup-gcc-asm-reg 0))
                         (arglist-cont-nonempty . +)
                         (arglist-close         . 0)
                         ))
     (c-indent-comments-syntactically-p . t)
     (php-mode-lineup-cascaded-calls . nil)
     (show-trailing-whitespace . nil)
     (fill-column . 120)
     (require-final-newline . t)))

  ;; (flycheck-define-checker nl/php-checker
  ;;   "A PHP syntax checker using the PHP command line interpreter.
  ;;    See URL http://php.net/manual/en/features.commandline.php."
  ;;   :command ("php" "-l" "-d" "error_reporting=E_ALL" "-d" "display_errors=1"
  ;;             "-d" "log_errors=0" source)
  ;;   :error-patterns
  ;;   ((error line-start (or "Parse" "Fatal" "syntax") " error" (any ":" ",") " "
  ;;           (message) " in " (file-name) " on line " line line-end))
  ;;   :modes (php-mode web-mode))

  ;; (eval-after-load 'flycheck
  ;;   '(add-to-list 'flycheck-checkers 'nl/php-checker))
  :custom
  (php-mode-coding-style (quote nl/php-nordita))
  (php-mode-lineup-cascaded-calls t))
#+end_src

*** [[https://github.com/nlamirault/phpunit.el][php-unit]]

#+begin_src emacs-lisp
(use-package phpunit
  :after (php-mode)
  :bind (:map php-mode-map
              ("C-c , t" . phpunit-current-test)
              ("C-c , c" . phpunit-current-class)
              ("C-c , p" . phpunit-current-project))
  :init
  (push `(php-error-regexp
          ,(rx line-start
               (zero-or-more "Trace:" space)
               "#" (one-or-more digit)
               (zero-or-more space)
               (group-n 1 (one-or-more (not (in space "(" "\n"))))
               "(" (group-n 2 (one-or-more digit))
               (zero-or-more not-newline))
          1 2)
        compilation-error-regexp-alist-alist)
  (push 'php-error-regexp compilation-error-regexp-alist)
  :custom
  (phpunit-arg "--stderr --debug"))
#+end_src

*** [[https://github.com/OVYA/php-cs-fixer][php-cs-fixer]]

Allows the Emacs editor to fix most issues in PHP code when you want to follow the coding standards
PSR-1 and PSR-2.

#+begin_src emacs-lisp
(use-package php-cs-fixer
  :after php-mode
  :commands (php-cs-fixer-before-save))
#+end_src

** [[https://github.com/bbatsov/projectile][projectile]]

#+BEGIN_QUOTE
Project navigation and management library for Emacs.
#+END_QUOTE


#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :bind-keymap ("C-c p" . projectile-command-map)
  :bind (:map projectile-command-map ("f" . consult-projectile))
  :init (projectile-mode +1)
  :config
  ;; tramp-fix: https://github.com/syl20bnr/spacemacs/issues/11381
  ;; (defadvice projectile-project-root (around ignore-remote first activate)
  ;;   (unless (file-remote-p default-directory) ad-do-it))

  (setq projectile-indexing-method 'alien
        projectile-remember-window-configs nil
        projectile-switch-project-action 'projectile-dired
        projectile-completion-system 'default
        projectile-enable-caching nil
        projectile-create-missing-test-files t
        projectile-mode-line "Projectile")

  (def-projectile-commander-method ?d
    "Open project root in dired."
    (projectile-dired)))
#+end_src

** [[https://github.com/tumashu/posframe][posframe]]

#+begin_src emacs-lisp
(use-package posframe
  :pin melpa
  :init
  (setq x-gtk-resize-child-frames 'resize-mode))
#+end_src

** [[https://github.com/jscheid/prettier.el][prettier]]

#+begin_src emacs-lisp
(use-package prettier
  :diminish perttier-mode
  :hook ((typescript-tsx-mode . prettier-mode)
         (typescript-mode . prettier-mode)
         ;;(js-mode . prettier-mode)
         (json-mode . prettier-mode)
         (css-mode . prettier-mode)
         (scss-mode . prettier-mode)
         (yaml-mode . prettier-mode)))
#+end_src

** [[https://protesilaos.com/emacs/pulsar][pulsar]]

Pulse highlight line on demand or after running select functions

#+begin_src emacs-lisp
(use-package pulsar
  :bind (("C-c l p" . pulsar-pulse-line)
         ("C-c l h" . pulsar-highlight-line))
  :init
  (pulsar-global-mode 1)
  :config
  (setq pulsar-pulse t)
  (setq pulsar-delay 0.055)
  (setq pulsar-iterations 10)
  (setq pulsar-face 'pulsar-magenta)
  (setq pulsar-highlight-face 'pulsar-yellow))

#+end_src

** rust

See https://robert.kra.hn/posts/rust-emacs-setup/

#+begin_src emacs-lisp
(defun nl/rustic-mode-hook ()
  (setq-local buffer-save-without-query t
              ;;compilation-ask-about-save nil
              )
  (display-line-numbers-mode)
  (add-hook 'before-save-hook 'lsp-format-buffer nil t))

(defun nl/toml-mode-hook ()
  (setq-local buffer-save-without-query t
              ;;compilation-ask-about-save nil
              )
  (display-line-numbers-mode))

(use-package rustic
  :hook ((rustic-mode . nl/rustic-mode-hook)
         (conf-toml-mode . nl/toml-mode-hook))
  :bind (:map rustic-mode-map
              ("M-j" . lsp-ui-imenu)
              ("M-?" . lsp-find-references)
              ("C-c C-c l" . flycheck-list-errors)
              ("C-c C-c a" . lsp-execute-code-action)
              ("C-c C-c r" . lsp-rename)
              ("C-c C-c q" . lsp-workspace-restart)
              ("C-c C-c Q" . lsp-workspace-shutdown)
              ("C-c C-c s" . lsp-rust-analyzer-status))
  :config
  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
  (setq rustic-format-on-save t))
#+end_src

** [[https://github.com/Kungsgeten/selected.el][selected]]

#+begin_src emacs-lisp
(use-package selected
  :diminish selected-minor-mode
  ;; :bind (:map selected-keymap
  ;;            ("M-%" . query-replace-regexp)
  ;;            ("C-[" . align-entire)
  ;;            ("C-f" . fill-region)
  ;;            ("C-U" . unfill-region)
  ;;            ("C-d" . downcase-region)
  ;;            ("C-r" . reverse-region)
  ;;            ("C-s" . sort-lines)
  ;;            ("C-u" . upcase-region))
  :init (selected-global-mode 1))
#+end_src

** [[https://github.com/ljos/sparql-mode/tree/15960092e8ce8ebe6a6afd82202ccf47cb306e76][sparql-mode]]

#+begin_src emacs-lisp
(use-package sparql-mode
  :mode (("\\.rq$" . sparql-mode)))
#+end_src

** [[https://github.com/akicho8/string-inflection][string-inflection]]

#+begin_src emacs-lisp
(use-package string-inflection
  :bind (("C-c i" . string-inflection-cycle)
         ("C-c C" . string-inflection-camelcase)        ;; Force to CamelCase
         ("C-c L" . string-inflection-lower-camelcase)  ;; Force to lowerCamelCase
         ("C-c J" . 'string-inflection-java-style-cycle))
  )
#+end_src

** Python

*** lsp-pyright

#+begin_src emacs-lisp
(use-package lsp-pyright
  :preface
  (defun nl/pyright-hook ()
    (require 'lsp-pyright))
  :hook
  (python-mode . display-line-numbers-mode)
  (python-mode . nl/pyright-hook)
  (python-mode . lsp-deferred))
#+end_src

** typescript

#+begin_src emacs-lisp
(use-package typescript-mode
  :diminish typescript-mode
  :mode ("\\.ts\\'" "\\.tsx\\'" "\\.js\\'")
  :bind (:map typescript-mode-map
              ("M-j" . c-indent-new-comment-line))
  :hook
  (typescript-mode . display-line-numbers-mode)
  (typescript-mode . lsp-deferred)
  (typescript-mode . column-enforce-mode)
  ;;(typescript-mode . rainbow-delimiters-mode)
  (typescript-mode . nl/typescript-mode)
  :preface
  (defun nl/typescript-mode ()
    (flycheck-mode +1)
    ;;(eldoc-mode +1)
    (company-mode +1)
    (subword-mode +1)
    ;; (push '(">=" . ?≥) prettify-symbols-alist)
    ;; (push '("<=" . ?≤) prettify-symbols-alist)
    ;; (push '("->" . ?→) prettify-symbols-alist)
    ;; (push '("=>" . ?↦) prettify-symbols-alist)
    ;; (prettify-symbols-mode)
    (setq column-enforce-column 120))
  :config
  (setq company-tooltip-align-annotations t ;; aligns annotation to the right hand side
        ;;prettify-symbols-unprettify-at-point 'right-edge
        flycheck-check-syntax-automatically '(save mode-enabled))
  (setq-default typescript-indent-level 4)
  )
#+end_src

** [[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]]

You can edit the text in the grep buffer after typing =C-c C-p=. After that the changed text is
highlighted. The following keybindings are defined:

=C-c C-e=: Apply the changes to file buffers.

=C-c C-u=: All changes are unmarked and ignored.

=C-c C-d=: Mark as delete to current line (including newline).

=C-c C-r=: Remove the changes in the region (these changes are not applied to the files. Of course, the remaining changes can still be applied to the files.)

=C-c C-p=: Toggle read-only area.

=C-c C-k=: Discard all changes and exit.

=C-x C-q=: Exit wgrep mode.

To save all buffers that wgrep has changed, run

#+begin_src emacs-lisp
(use-package wgrep
  :demand)
#+end_src

** [[https://github.com/fxbois/web-mode][web-mode]]

For TSX see: https://github.com/emacs-typescript/typescript.el/issues/4#issuecomment-947866123

#+begin_src emacs-lisp
(use-package web-mode
  :preface
  (defun nl/web-mode-hook ()
    (lsp-deferred)
    (local-set-key (kbd "M-q") #'fill-paragraph) ;; did not work with :bind
    (display-line-numbers-mode))
  :hook ((web-mode . nl/web-mode-hook)
         (typescript-tsx-mode . lsp))
  :mode (("\\.html\\'" . web-mode)
         ("\\.html\\.eex\\'" . web-mode)
         ("\\.html\\.tera\\'" . web-mode)
         ("\\.tpl.php\\'" . web-mode)
         ("\\.\\(j\\|t\\)sx\\'" . typescript-tsx-mode))
  :init
  (define-derived-mode typescript-tsx-mode typescript-mode "TypeScript-tsx")
  :config
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2))
#+end_src

** [[https://github.com/yoshiki/yaml-mode][yaml-mode]]

#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "\\.yml\\'"
  :preface
  (defun nl/yaml-mode-hook ()
    (set-fill-column 110)
    (display-line-numbers-mode))
  :hook (yaml-mode . nl/yaml-mode-hook)
  :config
  (setq-default fill-column 110))
#+end_src

** [[https://github.com/capitaomorte/yasnippet][yasnippet]]

It takes a few seconds to load and I don't need them immediately when
Emacs starts up, so we can defer loading yasnippet until there's some
idle time.

Large collection of snippets: [[https://github.com/AndreaCrotti/yasnippet-snippets][Andrea Crotti's collection]].

#+begin_src emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :hook (prog-mode . yas-minor-mode)
  ;;:init
  ;;(yas-global-mode 1)
  :config
  (use-package yasnippet-snippets)
  (yas-reload-all))
#+end_src

*** [[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]]


** Org mode

#+begin_src emacs-lisp
(use-package org
  :pin org
  :bind
  ("C-c c" . org-capture)
  ;;:hook (org-mode . nl/org-mode-setup)
  :custom-face
  (org-table ((t :foreground "#91b831")))
  :config
  (setq org-ellipsis " ⤵"
        org-hide-emphasis-markers t
        org-catch-invisible-edits 'error
        org-startup-indented t
        org-cycle-include-plain-lists 'integrate
        org-return-follows-link t
        org-M-RET-may-split-line nil
        org-src-fontify-natively t
        org-src-preserve-indentation t
        org-edit-src-content-indentation 0
        org-enforce-todo-dependencies t
        org-enforce-todo-checkbox-dependencies t
        ;; org-link-frame-setup '((file . find-file))
        org-export-backends '(ascii html icalendar latex md)
        org-log-into-drawer t)

  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/Sync/orgfiles/todo.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("l" "Link" entry (file+headline "~/Sync/orgfiles/links.org" "Links")
           "* %? %^L %^g \n%T" :prepend t)
          ("n" "Note" entry (file "~/Sync/orgfiles/notes.org")
           "* NOTE %?\n%U" :empty-lines 1)
          ("N" "Note with Clipboard" entry (file "~/Sync/orgfiles/notes.org")
           "* NOTE %?\n%U\n   %c" :empty-lines 1)
          ("j" "Journal" entry (file+datetree "~/Sync/orgfiles/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")))
  )

(with-eval-after-load 'org
  (defun nl/org-confirm-babel-evaluate (lang body)
    "Do not confirm evaluation for these languages."
    (not (or (string= lang "C")
             (string= lang "emacs-lisp")
             (string= lang "java")
             (string= lang "python")
             (string= lang "sh")
             (string= lang "sql")
             (string= lang "sqlite")
             )))
  (setq org-confirm-babel-evaluate 'nl/org-confirm-babel-evaluate)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t)
     (emacs-lisp . t)
     (latex . t)
     (java . t)
     (js . t)
     (python . t)
     (ruby . t)
     (shell . t)
     (sql . t)
     (sqlite . t)
     ))
  )
#+end_src

*** Structure templates

#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

*** org-roam

#+begin_src emacs-lisp
(use-package org-roam
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/Sync/RoamNotes")
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert))
  :config
  (org-roam-setup))
#+end_src
[[id:6d48a9f3-31ef-4f74-a880-d2c26062c043][Programming Languages]]

* Computer-specific settings

Load some computer-specific settings, such as the name and and email address. The way the settings
are loaded is based off of [[https://github.com/magnars/.emacs.d][Magnar Sveen's]] config.

#+begin_src emacs-lisp
(defvar nl/user-settings-dir nil
  "The directory with user-specific Emacs settings for this
  user.")

;; Settings for currently logged in user
(require 's)
(let ((user-dir (concat user-emacs-directory "users")))
  (when (file-directory-p user-dir)
    (setq nl/user-settings-dir
          (concat user-dir "/" (s-trim (shell-command-to-string "hostname -s"))))
    (add-to-list 'load-path nl/user-settings-dir)))

;; Load settings specific for the current user
(when (file-exists-p nl/user-settings-dir)
  (mapc 'load (directory-files nl/user-settings-dir nil "^[^#].*el$")))
#+end_src

# Local Variables:
# jinx-languages: "en_GB"
# End:
